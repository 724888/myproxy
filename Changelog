Changelog:
  Mar 8, 2018:
    1. make all .o files be generated under a temporary dir '.gen'

  Mar 7, 2018:
    1. remove related items in m_pendingQ instead of clearing all items 
        when error encounters

  Mar 6, 2018:
    1. clear the m_pendingQ item when exit or errors encounter

    2. close and release all resources related to a client fd if error occors
        only when all responses are received from backends, otherwise, 
        set a 'schedule close' flag for it and do release job until all
        are fetched 

    3. split deal_query_res() into 2 flows by determining whether the
        responses are from a single backend or more ones

    4. optimize the processing flows of 'show_xxx' commands by managing
        memory with 'tContainer' instead of 'new/delete'

    5. add 'tx_cache' machanism when not all data can be send successfully 
        by a single do_send() call 

    6. rewrite the startup script with python3

  Feb 22, 2018:
    1. merge 'id_cache' source into 'global_id_hook' module

    2. reset error buffer after replying its contents to clients

    3. encapsulate 'xa_item::m_err' related operations into 'cache_wrapper'


  Feb 14, 2018:
    1. add a tx-data-cache machanism when the data can not be send completely 
        during a single 'send()' call


  Feb 9, 2018:
    1. fix bug: when receiving a mysql packet with incompleted header or body,
        the proxy will work abnormaly


  Feb 7, 2018:
    1. fix the bug that myproxy can not correctly retrive mysql packets larger
        than 20000 bytes

  Feb 6, 2018:
    1. add sql hook to make the 'show xxx' commands to be routed to
        a client-specific datanode


  Feb 5, 2018:
    1. add 'to-be-closed' statement items in do_stmt_close(), don't close
        all the statement items

  Feb 2, 2018:
    1. fix the 'Incorrect arguments' error sometimes in prepare mode 

    2. add 'trim' operation on the incoming 'query mode' requests
        to eliminate the tailing zeros

    3. optimize the client login logic


  Jan 31, 2018:
    1. release current xa when processed the 'commit/rollback' commands

    2. add idle task logic to release unused prepared statements at backend servers

    3. optimize the error packet processing logic in deal_query_res()


  Jan 22, 2018:
    1. try to solve the 'bus error' problem in initializations of 'm_txBuff' 
        by c++ style 'new/delete', because the c-style 'malloc/free' always 
        causes 'bus error' problems in pressure tests.


  Jan 19, 2018:
    1. add support for new sharding rule: range mappings


  Jan 16, 2018:
    1. add support for 'read-write-seperation' mode on backends

    2. improve the 'mysqls' library by reducing unused APIs and 
        optimising the mysqls_gen_normal_resp() function

    3. add support for 'show processlist' command

    4. improve the 'com_field_list' command logic by returning 
        'real' table columns instead of dummy ones

    5. optimise logics of other 'local query' commands 


  Jan 15, 2018:
    1. make the 'idle time' of the idle task configurable

    2. make the xxx_active() APIs in safeDataNodeList thread-safe

    3. make the xxx_valid() APIs in safeTableDetailList thread-safe

    4. make datanode sockets blocked while scaning datanodes in idle task

    5. make datanode sockets blocked while refreshing table structures in idle task

    6. when scaning table structures, the idle task will try on next datanode
        if the previous one is failed, if all datanodes are failed, this
        table is marked 'invalid'

    7. lock datanode groups while refreshing backend connections and 
        table structures

    8. add validation checks during reading global configs


  Jan 12, 2018:
    1. add a timed 'idle task' to scan & keep connections to 
        backend servers so that the SQL route calculation and table 
        listing may work properly according to the latest backend states

  Jan 11, 2018:
    1. make 'desc', 'set', 'commit'/'rollback' be executed by backend

    2. add proxy internal errors feedbacks while scanning the SQL and getting routes

    3. optimised the logic that determining the requests are dealed by front-end or backend


  Jan 10, 2018:
    1. add validation checks to tables

    2. add 'myproxy internal errors' to errors list

    3. fix bug of 'duplicated route' when calculating SQL route


  Jan 9, 2018:
    1. add validation checks of datanodes when adding tables from config file

  Jan 8, 2018:
    1. add bind address/listen port configured options

  Jan 5, 2018:
    1. add vertical sharding support

    2. update to v0.01.14

  Dec 1, 2017:
    1. using move instead of copying sql parsing results(tSqlParseItem)

  Nov 28, 2017:
    1. add 'create table' & 'drop table' usage support

    2. make 'myproxy' an open source project on github

    3. update to v0.01.13

  Nov 15, 2017:
    1. add an INITIAL version of 'aggregation processing' module named 'agg_hook'
        that do agregations on result sets

    2. update to v0.01.12 

  Nov 9, 2017:
    1. fix bug that a transaction (for example, doing a query) without valid
        cache  will be abandoned, it is now saved until the cache is available

    2. the 'rx()' method on datanode fds is now moved into module 'myproxy_backend'

    3. fix a memory leak problem of releasing column group buffers in a 
        'to-be-deleted' xa

    4. fix 'thread-unsafe' problem when returning back the cache

    5. the cache is forced to be removed when an 'incorrect' fd is closed


  Nov 7, 2017:
    1. make 'cache pool size', 'datanode group size', 'thread pool size'
        to be configuable 

    2. add support for '__comment' keyword of json files

  Nov 3, 2017:
    1. add a new module named 'dnmgr' to manage usages of datanode and
        datanode groups

    2. add the signal way to reload config from fs by sending signal 'SIGUSR2'

  Oct 30, 2017:
    1. add a new hook module named 'static_parse' which handles most sql
        adaption jobs from ZAS except placeholder adaption

    2. fixed a bug that the return_cache() call within deal_query_res() 
        will crash when error occors from datanodes

    3. updated to v0.01.11 alpha

  Oct 25, 2017:
    1. changed inheritance of class hook_object and hook_framework which 
        will no longer derive from sql_tree that improves performance of 
        the sql parsing process

  Oct 24, 2017:
    1. all request/sql interceptions are now be processed in 'hook' modules

    2. added multi-threading support in deal_stmt_prepare_res() logic

    3. fixed the 'duplicated-packet receiving' bug in xa_item::rx() logic
  
    4. the transaction terminating command 'commit/rollback' is now implemented
        in the myproxy_backend module

    5. fixed the sql-tree generating bug of 'insert' statements in ZAS module

    6. added support for the g++-7.x compiler

    7. updated to v0.01.10 alpha


  Oct 13, 2017:
    1. add a namespace to hold configs, table list, login sessions, and etc

    2. the 'interceptor' module is renamed to 'hook'


  Sep 30, 2017:
    1. using new machanism of Data-Receiving-Thread management, now 
        every result set streams from datanodes are processed by multi threads.

    2. updated to v0.01.09 alpah

  Sep 27, 2017:
    1. using new data receiving logic which read data block by block 
        during fetching data from physical datanodes.

  Sep 21, 2017:
    1. added ordering to the multimap db

  Sep 20, 2017:
    1. the interceptor module list is now automatically generated by module_gen.py

    2. the cache is replaced by std::multimap

    3. updated to v0.01.08 alpha


  Aug 17, 2017:
    1. added a initial implementation of 'global id' schema, supports
        global id attaching with 'insert <format> <values>' statements

    2. updated to v0.01.07 alpha


  Jul 19, 2017:
    1. using the boost::shared_ptr to replace all new/delete usages, 
    
         updated to v0.01.06 alpha

  Jul 17, 2017:
    1. using new version of netsvr, updated to v0.01.05 alpha

  Jul 16, 2017:
    1. the query mode is completed, update to v0.01.04 alpha

  Jul 5, 2017:
    1. implemented myproxy under new netsvr version at v1.02.x, the query 

        mode is almost completed

    2. updated version to v0.01.03 alpha

  May 27, 2017:
    1. the basic statements 'select/insert/delete/update' are supported by

        the proxy

    2. updated version to v0.00.14 beta

  May 18, 2017:
    1. the main functions of 'sql-parser' module are completed, but needed 
    
        to test with the 'sql-router' module which is not yet developed

    2. update the source to v.0.00.13 beta, the 'sql-router' are to be

        developed in the next reversion


  May 4, 2017:
    1. the 2 sql modes 'sql-query' and 'statement-exec' are completed

    2. remove 'mysqlc' and 'toolkits' modules, use those in 'myitf' instead

    3. updated version to v0.00.13 alpha, the 'sql-parser' module will

        be developed at this reversion


  Apr 25, 2017:
    1. add 'stmt_send_long_data' request support to prepare mode

    2. updated version to v0.00.12 alpha

  Apr 21, 2017:
    1. added support for prepare mode of mysql protocol

    2. updated version to v0.00.11 alpha

  Apr 12, 2017:

    1. added back-end error message feedback to client, but needs more tests

    2. added duplicated prepared statements detection, needs more tests too

  Apr 11, 2017:
    1. added support for statement prepare command, but needed more tests

    2. updated version to v0.00.10 alpha

  Apr 5, 2017:
    1. encapsulates all proxy layer protocols by files in proto/ directory

    2. updated version to v0.00.09 beta

  Mar 16, 2017:
    1. use C version of the following modules instead of C++ versions:

        resizable container, dispatch protocol

    2. updated version to v0.00.08 alpha

  Feb 23, 2017:
    1. modified the way that processor sending packets to dispatcher

    2. updated version to v0.00.07 alpha

  Feb 4, 2017:
    1. updated mysqlc source to v1.00.11 beta

    2. updated version to v0.00.06 alpha

  Jan 25, 2017:
    1. completed coding the tx-part of 'sql-spliting',
        need to complete the following:

        . sub-sql executing part at processor and also 
           the result set responses

        . the 'deep-parse' in sql_parser

        . the 'sql-routing' in dispatcher

  Jan 22, 2017:
    1. support 'desc table' command, will add the sql-split 
        machanism later

    2. updated version to v0.0.05 beta

  Jan 18, 2017:
    1. add table structure and table extra informations in sync_priv
        response

  Oct 20, 2016:
    1. merged mysqlc library into main source tree, updated 
        version to v0.0.04

  Oct 13, 2016:
    1. updated the json_parser source, update version to v0.0.03

  Oct 11, 2016:
    1. libraries 'toolkits', 'mysqls' are merged into main source
        tree, so updated version to v0.0.02

  Oct 9, 2016:
    1. initial version, implemented a framework to handle
        mysql commands, also implemented dummy handlers for
        a few commands

    2. version at v0.0.01 

